import { BpdStateManagerConfig, StateMutationHandler, BpdStateAction } from "./interfaces";
import { IBpdState } from "./state/state";
export declare function createStateManager<VStates, TActions>(config?: BpdStateManagerConfig<VStates>): void;
export declare function createState<VStates, TActions>(name: string, initialValue: VStates, mutationHandler: StateMutationHandler<TActions, VStates>, config?: BpdStateManagerConfig<VStates>): void;
export declare function removeState<VStates, TActions>(name: string): void;
export declare function getState<VStates, TActions>(name: string): IBpdState<VStates, TActions> | undefined;
export declare function performStateAction<VStates, TActions>(name: string, action: BpdStateAction<TActions>, callback?: (state: VStates) => void): void;
export declare function subscribeToState<VStates, TActions>(name: string, callback: (state: VStates) => void): string | undefined;
export declare function unsubscribeFromState<VStates, TActions>(name: string, id: string): void;
export declare function undoState<VStates, TActions>(name: string): void;
