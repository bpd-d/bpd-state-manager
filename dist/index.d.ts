// Generated by dts-bundle v0.7.3

export const VERSION_INFO = "0.1.1";
global {
    interface Window {
        $bdpStateManager: any;
    }
}
export class BpdStateManagerFactory<VStates, TActions> {
    #private;
    constructor(config?: BpdStateManagerConfig<VStates>);
    createState(name: string, initialValue: VStates, performer: StatePerformer<TActions, VStates>, config?: BpdStateManagerConfig<VStates>): void;
    removeState(name: string): void;
    getState(name: string): IBpdState<VStates, TActions> | undefined;
    perform(name: string, action: BpdStateAction<TActions>, callback?: (state: VStates) => void): void;
    subscribe(name: string, callback: (state: VStates) => void): string | undefined;
    unsubscribe(name: string, id: string): void;
    undo(name: string): void;
}
export class BpdStateManager {
    static createStateManager<VStates, TActions>(config?: BpdStateManagerConfig<VStates>): void;
    static createState<VStates, TActions>(name: string, initialValue: VStates, performer: StatePerformer<TActions, VStates>, config?: BpdStateManagerConfig<VStates>): void;
    static removeState<VStates, TActions>(name: string): void;
    static getState<VStates, TActions>(name: string): IBpdState<VStates, TActions>;
    static performStateAction<VStates, TActions>(name: string, action: BpdStateAction<TActions>, callback?: (state: VStates) => void): void;
    static subscribeToState<VStates, TActions>(name: string, callback: (state: VStates) => void): string;
    static unsubscribeFromState<VStates, TActions>(name: string, id: string): void;
    static undoState(name: string): void;
}

export type OnChangeEventType = "action" | "lib";
export interface BpdStateOnChange<V> {
    (stateId: string, type: OnChangeEventType, detail: string, state: V): void;
}
export interface BpdStateOnError {
    (stateId: string, type: OnChangeEventType, error: Error, detail: string): void;
}
export interface BpdStateAction<T> {
    action: string;
    data?: T;
}
export interface BpdStateManagerConfig<V> {
    onChange?: BpdStateOnChange<V>;
    onError?: BpdStateOnError;
    copyMaker?: IObjectCopyMaker<V>;
}
export interface StatePerformer<V, P> {
    (state: P, action: BpdStateAction<V>): P;
}
export interface BpdManagedStates<VStates, TActions> {
    [id: string]: IBpdState<VStates, TActions>;
}
export interface IObjectCopyMaker<V> {
    copy(obj: V): V;
}

export interface IBpdState<VState, PAction> {
        perform(action: BpdStateAction<PAction>, callback?: (state: VState) => void | undefined): void;
        subscribe(callback: (state: VState) => void): string | undefined;
        unsubscribe(id: string): boolean;
        getState(): VState;
        undo(): void;
}
export class BpdState<VState, PAction> implements IBpdState<VState, PAction> {
        #private;
        constructor(id: string, init: VState, performer: StatePerformer<PAction, VState>, config?: BpdStateManagerConfig<VState>);
        perform(action: BpdStateAction<PAction>, callback?: (state: VState) => void): void;
        subscribe(callback: (state: VState) => void): string | undefined;
        unsubscribe(id: string): boolean;
        getState(): VState;
        undo(): void;
}

