// Generated by dts-bundle v0.7.3

export const VERSION_INFO = "0.1.0";
global {
    interface Window {
        $bdpStateManager: any;
    }
}
export class BpdStateManager<VStates, TActions> {
    #private;
    constructor(config?: BpdStateManagerConfig<VStates>);
    createState(name: string, initialValue: VStates, performer: StatePerformer<TActions, VStates>, config?: BpdStateManagerConfig<VStates>): void;
    removeState(name: string): void;
    getState(name: string): IBpdState<VStates, TActions> | undefined;
    perform(name: string, action: BpdStateAction<TActions>, callback?: (state: VStates) => void): void;
    subscribe(name: string, callback: (state: VStates) => void): string | undefined;
    unsubscribe(name: string, id: string): void;
}
export function createStateManager<VStates, TActions>(config?: BpdStateManagerConfig<VStates>): void;
export function createState<VStates, TActions>(name: string, initialValue: VStates, performer: StatePerformer<TActions, VStates>, config?: BpdStateManagerConfig<VStates>): void;
export function removeState<VStates, TActions>(name: string): void;
export function getState<VStates, TActions>(name: string): IBpdState<VStates, TActions>;
export function perform<VStates, TActions>(name: string, action: BpdStateAction<TActions>, callback?: (state: VStates) => void): void;
export function subscribe<VStates, TActions>(name: string, callback: (state: VStates) => void): string;
export function unsubscribe<VStates, TActions>(name: string, id: string): void;

export type OnChangeEventType = "action" | "lib";
export interface BpdStateOnChange<V> {
    (stateId: string, type: OnChangeEventType, detail: string, state: V): void;
}
export interface BpdStateOnError {
    (stateId: string, type: OnChangeEventType, error: Error, detail: string): void;
}
export interface BpdStateAction<T> {
    action: string;
    data: T;
}
export interface BpdStateManagerConfig<V> {
    onChange?: BpdStateOnChange<V>;
    onError?: BpdStateOnError;
}
export interface StatePerformer<V, P> {
    (state: P, action: BpdStateAction<V>): P;
}
export interface BpdManagedStates<VStates, TActions> {
    [id: string]: IBpdState<VStates, TActions>;
}

export interface IBpdState<VState, PAction> {
    perform(action: BpdStateAction<PAction>, callback?: (state: VState) => void | undefined): void;
    subscribe(callback: (state: VState) => void): string | undefined;
    unsubscribe(id: string): boolean;
    getState(): VState;
}
export class BpdState<VState, PAction> implements IBpdState<VState, PAction> {
    #private;
    constructor(id: string, init: VState, performer: StatePerformer<PAction, VState>, config?: BpdStateManagerConfig<VState>);
    perform(action: BpdStateAction<PAction>, callback?: (state: VState) => void): void;
    subscribe(callback: (state: VState) => void): string | undefined;
    unsubscribe(id: string): boolean;
    getState(): VState;
}

